import { IonicNativePlugin } from '@ionic-native/core';
/**
 * @name Native Storage
 * @description Native storage of variables in Android and iOS
 *
 * @usage
 * ```typescript
 * import { NativeStorage } from '@ionic-native/native-storage/ngx';
 *
 * constructor(private nativeStorage: NativeStorage) { }
 *
 * ...
 *
 * this.nativeStorage.setItem('myitem', {property: 'value', anotherProperty: 'anotherValue'})
 *   .then(
 *     () => console.log('Stored item!'),
 *     error => console.error('Error storing item', error)
 *   );
 *
 * this.nativeStorage.getItem('myitem')
 *   .then(
 *     data => console.log(data),
 *     error => console.error(error)
 *   );
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class NativeStorage extends IonicNativePlugin {
    /**
     * Initialises shared storage with the suite name when using app groups in iOS
     * @param reference {string}
     * @returns {Promise<void>}
     */
    initWithSuiteName(reference: string): Promise<void>;
    /**
     * Stores a value
     * @param reference {string}
     * @param value
     * @returns {Promise<any>}
     */
    setItem(reference: string, value: any): Promise<any>;
    /**
     * Gets a stored item
     * @param reference {string}
     * @returns {Promise<any>}
     */
    getItem(reference: string): Promise<any>;
    /**
     * Retrieving all keys
     * @returns {Promise<any>}
     */
    keys(): Promise<any>;
    /**
     * Removes a single stored item
     * @param reference {string}
     * @returns {Promise<any>}
     */
    remove(reference: string): Promise<any>;
    /**
     * Removes all stored values.
     * @returns {Promise<any>}
     */
    clear(): Promise<any>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NativeStorage, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NativeStorage>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZC50cyIsInNvdXJjZXMiOlsiaW5kZXguZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJb25pY05hdGl2ZVBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG4vKipcbiAqIEBuYW1lIE5hdGl2ZSBTdG9yYWdlXG4gKiBAZGVzY3JpcHRpb24gTmF0aXZlIHN0b3JhZ2Ugb2YgdmFyaWFibGVzIGluIEFuZHJvaWQgYW5kIGlPU1xuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgTmF0aXZlU3RvcmFnZSB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvbmF0aXZlLXN0b3JhZ2Uvbmd4JztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIG5hdGl2ZVN0b3JhZ2U6IE5hdGl2ZVN0b3JhZ2UpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIHRoaXMubmF0aXZlU3RvcmFnZS5zZXRJdGVtKCdteWl0ZW0nLCB7cHJvcGVydHk6ICd2YWx1ZScsIGFub3RoZXJQcm9wZXJ0eTogJ2Fub3RoZXJWYWx1ZSd9KVxuICogICAudGhlbihcbiAqICAgICAoKSA9PiBjb25zb2xlLmxvZygnU3RvcmVkIGl0ZW0hJyksXG4gKiAgICAgZXJyb3IgPT4gY29uc29sZS5lcnJvcignRXJyb3Igc3RvcmluZyBpdGVtJywgZXJyb3IpXG4gKiAgICk7XG4gKlxuICogdGhpcy5uYXRpdmVTdG9yYWdlLmdldEl0ZW0oJ215aXRlbScpXG4gKiAgIC50aGVuKFxuICogICAgIGRhdGEgPT4gY29uc29sZS5sb2coZGF0YSksXG4gKiAgICAgZXJyb3IgPT4gY29uc29sZS5lcnJvcihlcnJvcilcbiAqICAgKTtcbiAqIGBgYFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOYXRpdmVTdG9yYWdlIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAgIC8qKlxuICAgICAqIEluaXRpYWxpc2VzIHNoYXJlZCBzdG9yYWdlIHdpdGggdGhlIHN1aXRlIG5hbWUgd2hlbiB1c2luZyBhcHAgZ3JvdXBzIGluIGlPU1xuICAgICAqIEBwYXJhbSByZWZlcmVuY2Uge3N0cmluZ31cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cbiAgICAgKi9cbiAgICBpbml0V2l0aFN1aXRlTmFtZShyZWZlcmVuY2U6IHN0cmluZyk6IFByb21pc2U8dm9pZD47XG4gICAgLyoqXG4gICAgICogU3RvcmVzIGEgdmFsdWVcbiAgICAgKiBAcGFyYW0gcmVmZXJlbmNlIHtzdHJpbmd9XG4gICAgICogQHBhcmFtIHZhbHVlXG4gICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICAgKi9cbiAgICBzZXRJdGVtKHJlZmVyZW5jZTogc3RyaW5nLCB2YWx1ZTogYW55KTogUHJvbWlzZTxhbnk+O1xuICAgIC8qKlxuICAgICAqIEdldHMgYSBzdG9yZWQgaXRlbVxuICAgICAqIEBwYXJhbSByZWZlcmVuY2Uge3N0cmluZ31cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgICAqL1xuICAgIGdldEl0ZW0ocmVmZXJlbmNlOiBzdHJpbmcpOiBQcm9taXNlPGFueT47XG4gICAgLyoqXG4gICAgICogUmV0cmlldmluZyBhbGwga2V5c1xuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAgICovXG4gICAga2V5cygpOiBQcm9taXNlPGFueT47XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIHNpbmdsZSBzdG9yZWQgaXRlbVxuICAgICAqIEBwYXJhbSByZWZlcmVuY2Uge3N0cmluZ31cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgICAqL1xuICAgIHJlbW92ZShyZWZlcmVuY2U6IHN0cmluZyk6IFByb21pc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBzdG9yZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAgICovXG4gICAgY2xlYXIoKTogUHJvbWlzZTxhbnk+O1xufVxuIl19